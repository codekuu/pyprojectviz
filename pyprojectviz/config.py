from typing import Set
import os
import typer
import yaml
from pydantic import BaseModel


class GraphvizConfiguration(BaseModel):
    comment: str = "Generated by Pyprojectviz"
    layout_engine: str = "dot"
    output_format: str = "png"
    graph_attr: dict = {
        "splines": "ortho",
        "nodesep": "0.5",
        "ranksep": "2",
    }
    node_attr: dict = {
        "shape": "box",
        "fontname": "Helvetica",
        "fontsize": "10",
        "height": "0.2",
        "width": "0.2",
        "style": "filled",
        "fillcolor": "white",
        "color": "black",
        "fontcolor": "black",
    }
    edge_attr: dict = {
        "color": "black",
        "arrowhead": "open",
        "fontname": "Helvetica",
        "fontsize": "8",
        "fontcolor": "black",
    }
    class_node_attrs: dict = {
        "style": "filled",
        "fillcolor": "darkgreen",
        "fontcolor": "white",
        "fontname": "Helvetica bold",
    }
    method_node_attrs: dict = {
        "fontname": "Helvetica",
    }


class Configuration(BaseModel):
    graphviz: GraphvizConfiguration = GraphvizConfiguration()
    ignore_methods: Set[str] = set()
    ignore_classes: Set[str] = set()
    ignore_modules: Set[str] = set()
    ignore_exceptions: bool = False


def load_config(conf_file) -> Configuration:
    config_from_file = {}

    if not conf_file:
        return Configuration.model_validate(config_from_file)

    # Check if the configuration file exists
    if not os.path.isfile(conf_file):
        typer.echo("Invalid path to configuration file")
        raise typer.Exit(code=1)

    with open(conf_file, "r") as file:
        from_file = yaml.safe_load(file)
        if from_file:
            config_from_file = from_file

    return Configuration.model_validate(config_from_file)
